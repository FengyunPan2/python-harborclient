# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.products_api import ProductsApi


class TestProductsApi(unittest.TestCase):
    """ ProductsApi unit test stubs """

    def setUp(self):
        self.api = swagger_client.apis.products_api.ProductsApi()

    def tearDown(self):
        pass

    def test_configurations_get(self):
        """
        Test case for configurations_get

        Get system configurations.
        """
        pass

    def test_configurations_put(self):
        """
        Test case for configurations_put

        Modify system configurations.
        """
        pass

    def test_configurations_reset_post(self):
        """
        Test case for configurations_reset_post

        Reset system configurations.
        """
        pass

    def test_email_ping_post(self):
        """
        Test case for email_ping_post

        Test connection and authentication with email server.
        """
        pass

    def test_internal_syncregistry_post(self):
        """
        Test case for internal_syncregistry_post

        Sync repositories from registry to DB.
        """
        pass

    def test_jobs_replication_get(self):
        """
        Test case for jobs_replication_get

        List filters jobs according to the policy and repository
        """
        pass

    def test_jobs_replication_id_delete(self):
        """
        Test case for jobs_replication_id_delete

        Delete specific ID job.
        """
        pass

    def test_jobs_replication_id_log_get(self):
        """
        Test case for jobs_replication_id_log_get

        Get job logs.
        """
        pass

    def test_jobs_scan_id_log_get(self):
        """
        Test case for jobs_scan_id_log_get

        Get job logs.
        """
        pass

    def test_ldap_ping_post(self):
        """
        Test case for ldap_ping_post

        Ping available ldap service.
        """
        pass

    def test_ldap_users_import_post(self):
        """
        Test case for ldap_users_import_post

        Import selected available ldap users.
        """
        pass

    def test_ldap_users_search_post(self):
        """
        Test case for ldap_users_search_post

        Search available ldap users.
        """
        pass

    def test_logs_get(self):
        """
        Test case for logs_get

        Get recent logs of the projects which the user is a member of
        """
        pass

    def test_policies_replication_get(self):
        """
        Test case for policies_replication_get

        List filters policies by name and project_id
        """
        pass

    def test_policies_replication_id_enablement_put(self):
        """
        Test case for policies_replication_id_enablement_put

        Put modifies enablement of the policy.
        """
        pass

    def test_policies_replication_id_get(self):
        """
        Test case for policies_replication_id_get

        Get replication policy.
        """
        pass

    def test_policies_replication_id_put(self):
        """
        Test case for policies_replication_id_put

        Put modifies name, description, target and enablement of policy.
        """
        pass

    def test_policies_replication_post(self):
        """
        Test case for policies_replication_post

        Post creates a policy
        """
        pass

    def test_projects_get(self):
        """
        Test case for projects_get

        List projects
        """
        pass

    def test_projects_head(self):
        """
        Test case for projects_head

        Check if the project name user provided already exists.
        """
        pass

    def test_projects_post(self):
        """
        Test case for projects_post

        Create a new project.
        """
        pass

    def test_projects_project_id_delete(self):
        """
        Test case for projects_project_id_delete

        Delete project by projectID
        """
        pass

    def test_projects_project_id_get(self):
        """
        Test case for projects_project_id_get

        Return specific project detail infomation
        """
        pass

    def test_projects_project_id_logs_get(self):
        """
        Test case for projects_project_id_logs_get

        Get access logs accompany with a relevant project.
        """
        pass

    def test_projects_project_id_members_get(self):
        """
        Test case for projects_project_id_members_get

        Return a project's relevant role members.
        """
        pass

    def test_projects_project_id_members_post(self):
        """
        Test case for projects_project_id_members_post

        Add project role member accompany with relevant project and user.
        """
        pass

    def test_projects_project_id_members_user_id_delete(self):
        """
        Test case for projects_project_id_members_user_id_delete

        Delete project role members accompany with relevant project and user.
        """
        pass

    def test_projects_project_id_members_user_id_get(self):
        """
        Test case for projects_project_id_members_user_id_get

        Return role members accompany with relevant project and user.
        """
        pass

    def test_projects_project_id_members_user_id_put(self):
        """
        Test case for projects_project_id_members_user_id_put

        Update project role members accompany with relevant project and user.
        """
        pass

    def test_projects_project_id_publicity_put(self):
        """
        Test case for projects_project_id_publicity_put

        Update properties for a selected project.
        """
        pass

    def test_repositories_get(self):
        """
        Test case for repositories_get

        Get repositories accompany with relevant project and repo name.
        """
        pass

    def test_repositories_repo_name_delete(self):
        """
        Test case for repositories_repo_name_delete

        Delete a repository.
        """
        pass

    def test_repositories_repo_name_signatures_get(self):
        """
        Test case for repositories_repo_name_signatures_get

        Get signature information of a repository
        """
        pass

    def test_repositories_repo_name_tags_get(self):
        """
        Test case for repositories_repo_name_tags_get

        Get tags of a relevant repository.
        """
        pass

    def test_repositories_repo_name_tags_tag_delete(self):
        """
        Test case for repositories_repo_name_tags_tag_delete

        Delete a tag in a repository.
        """
        pass

    def test_repositories_repo_name_tags_tag_get(self):
        """
        Test case for repositories_repo_name_tags_tag_get

        Get the tag of the repository.
        """
        pass

    def test_repositories_repo_name_tags_tag_manifest_get(self):
        """
        Test case for repositories_repo_name_tags_tag_manifest_get

        Get manifests of a relevant repository.
        """
        pass

    def test_repositories_repo_name_tags_tag_scan_post(self):
        """
        Test case for repositories_repo_name_tags_tag_scan_post

        Scan the image.
        """
        pass

    def test_repositories_repo_name_tags_tag_vulnerability_details_get(self):
        """
        Test case for repositories_repo_name_tags_tag_vulnerability_details_get

        Get vulnerability details of the image.
        """
        pass

    def test_repositories_top_get(self):
        """
        Test case for repositories_top_get

        Get public repositories which are accessed most.
        """
        pass

    def test_search_get(self):
        """
        Test case for search_get

        Search for projects and repositories
        """
        pass

    def test_statistics_get(self):
        """
        Test case for statistics_get

        Get projects number and repositories number relevant to the user
        """
        pass

    def test_systeminfo_get(self):
        """
        Test case for systeminfo_get

        Get general system info
        """
        pass

    def test_systeminfo_getcert_get(self):
        """
        Test case for systeminfo_getcert_get

        Get default root certificate under OVA deployment.
        """
        pass

    def test_systeminfo_volumes_get(self):
        """
        Test case for systeminfo_volumes_get

        Get system volume info (total/free size).
        """
        pass

    def test_targets_get(self):
        """
        Test case for targets_get

        List filters targets by name.
        """
        pass

    def test_targets_id_delete(self):
        """
        Test case for targets_id_delete

        Delete specific replication's target.
        """
        pass

    def test_targets_id_get(self):
        """
        Test case for targets_id_get

        Get replication's target.
        """
        pass

    def test_targets_id_ping_post(self):
        """
        Test case for targets_id_ping_post

        Ping target.
        """
        pass

    def test_targets_id_policies_get(self):
        """
        Test case for targets_id_policies_get

        List the target relevant policies.
        """
        pass

    def test_targets_id_put(self):
        """
        Test case for targets_id_put

        Update replication's target.
        """
        pass

    def test_targets_ping_post(self):
        """
        Test case for targets_ping_post

        Ping validates target.
        """
        pass

    def test_targets_post(self):
        """
        Test case for targets_post

        Create a new replication target.
        """
        pass

    def test_users_current_get(self):
        """
        Test case for users_current_get

        Get current user info.
        """
        pass

    def test_users_get(self):
        """
        Test case for users_get

        Get registered users of Harbor.
        """
        pass

    def test_users_post(self):
        """
        Test case for users_post

        Creates a new user account.
        """
        pass

    def test_users_user_id_delete(self):
        """
        Test case for users_user_id_delete

        Mark a registered user as be removed.
        """
        pass

    def test_users_user_id_get(self):
        """
        Test case for users_user_id_get

        Get a user's profile.
        """
        pass

    def test_users_user_id_password_put(self):
        """
        Test case for users_user_id_password_put

        Change the password on a user that already exists.
        """
        pass

    def test_users_user_id_put(self):
        """
        Test case for users_user_id_put

        Update a registered user to change his profile.
        """
        pass

    def test_users_user_id_sysadmin_put(self):
        """
        Test case for users_user_id_sysadmin_put

        Update a registered user to change to be an administrator of Harbor.
        """
        pass


if __name__ == '__main__':
    unittest.main()
