# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Repository(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'project_id': 'int',
        'description': 'str',
        'pull_count': 'int',
        'star_count': 'int',
        'tags_count': 'int',
        'creation_time': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'project_id': 'project_id',
        'description': 'description',
        'pull_count': 'pull_count',
        'star_count': 'star_count',
        'tags_count': 'tags_count',
        'creation_time': 'creation_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, name=None, project_id=None, description=None, pull_count=None, star_count=None, tags_count=None, creation_time=None, update_time=None):
        """
        Repository - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._project_id = None
        self._description = None
        self._pull_count = None
        self._star_count = None
        self._tags_count = None
        self._creation_time = None
        self._update_time = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if project_id is not None:
          self.project_id = project_id
        if description is not None:
          self.description = description
        if pull_count is not None:
          self.pull_count = pull_count
        if star_count is not None:
          self.star_count = star_count
        if tags_count is not None:
          self.tags_count = tags_count
        if creation_time is not None:
          self.creation_time = creation_time
        if update_time is not None:
          self.update_time = update_time

    @property
    def id(self):
        """
        Gets the id of this Repository.
        The ID of repository.

        :return: The id of this Repository.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Repository.
        The ID of repository.

        :param id: The id of this Repository.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Repository.
        The name of repository.

        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Repository.
        The name of repository.

        :param name: The name of this Repository.
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """
        Gets the project_id of this Repository.
        The project ID of repository.

        :return: The project_id of this Repository.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this Repository.
        The project ID of repository.

        :param project_id: The project_id of this Repository.
        :type: int
        """

        self._project_id = project_id

    @property
    def description(self):
        """
        Gets the description of this Repository.
        The description of repository.

        :return: The description of this Repository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Repository.
        The description of repository.

        :param description: The description of this Repository.
        :type: str
        """

        self._description = description

    @property
    def pull_count(self):
        """
        Gets the pull_count of this Repository.
        The pull count of repository.

        :return: The pull_count of this Repository.
        :rtype: int
        """
        return self._pull_count

    @pull_count.setter
    def pull_count(self, pull_count):
        """
        Sets the pull_count of this Repository.
        The pull count of repository.

        :param pull_count: The pull_count of this Repository.
        :type: int
        """

        self._pull_count = pull_count

    @property
    def star_count(self):
        """
        Gets the star_count of this Repository.
        The star count of repository.

        :return: The star_count of this Repository.
        :rtype: int
        """
        return self._star_count

    @star_count.setter
    def star_count(self, star_count):
        """
        Sets the star_count of this Repository.
        The star count of repository.

        :param star_count: The star_count of this Repository.
        :type: int
        """

        self._star_count = star_count

    @property
    def tags_count(self):
        """
        Gets the tags_count of this Repository.
        The tags count of repository.

        :return: The tags_count of this Repository.
        :rtype: int
        """
        return self._tags_count

    @tags_count.setter
    def tags_count(self, tags_count):
        """
        Sets the tags_count of this Repository.
        The tags count of repository.

        :param tags_count: The tags_count of this Repository.
        :type: int
        """

        self._tags_count = tags_count

    @property
    def creation_time(self):
        """
        Gets the creation_time of this Repository.
        The creation time of repository.

        :return: The creation_time of this Repository.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this Repository.
        The creation time of repository.

        :param creation_time: The creation_time of this Repository.
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """
        Gets the update_time of this Repository.
        The update time of repository.

        :return: The update_time of this Repository.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this Repository.
        The update time of repository.

        :param update_time: The update_time of this Repository.
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
