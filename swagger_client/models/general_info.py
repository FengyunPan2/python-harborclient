# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GeneralInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'with_notary': 'bool',
        'with_clair': 'bool',
        'with_admiral': 'bool',
        'admiral_endpoint': 'str',
        'auth_mode': 'str',
        'project_creation_restriction': 'str',
        'self_registration': 'bool',
        'has_ca_root': 'bool',
        'harbor_version': 'str',
        'next_scan_all': 'int',
        'clair_vulnerability_status': 'GeneralInfoClairVulnerabilityStatus'
    }

    attribute_map = {
        'with_notary': 'with_notary',
        'with_clair': 'with_clair',
        'with_admiral': 'with_admiral',
        'admiral_endpoint': 'admiral_endpoint',
        'auth_mode': 'auth_mode',
        'project_creation_restriction': 'project_creation_restriction',
        'self_registration': 'self_registration',
        'has_ca_root': 'has_ca_root',
        'harbor_version': 'harbor_version',
        'next_scan_all': 'next_scan_all',
        'clair_vulnerability_status': 'clair_vulnerability_status'
    }

    def __init__(self, with_notary=None, with_clair=None, with_admiral=None, admiral_endpoint=None, auth_mode=None, project_creation_restriction=None, self_registration=None, has_ca_root=None, harbor_version=None, next_scan_all=None, clair_vulnerability_status=None):
        """
        GeneralInfo - a model defined in Swagger
        """

        self._with_notary = None
        self._with_clair = None
        self._with_admiral = None
        self._admiral_endpoint = None
        self._auth_mode = None
        self._project_creation_restriction = None
        self._self_registration = None
        self._has_ca_root = None
        self._harbor_version = None
        self._next_scan_all = None
        self._clair_vulnerability_status = None

        if with_notary is not None:
          self.with_notary = with_notary
        if with_clair is not None:
          self.with_clair = with_clair
        if with_admiral is not None:
          self.with_admiral = with_admiral
        if admiral_endpoint is not None:
          self.admiral_endpoint = admiral_endpoint
        if auth_mode is not None:
          self.auth_mode = auth_mode
        if project_creation_restriction is not None:
          self.project_creation_restriction = project_creation_restriction
        if self_registration is not None:
          self.self_registration = self_registration
        if has_ca_root is not None:
          self.has_ca_root = has_ca_root
        if harbor_version is not None:
          self.harbor_version = harbor_version
        if next_scan_all is not None:
          self.next_scan_all = next_scan_all
        if clair_vulnerability_status is not None:
          self.clair_vulnerability_status = clair_vulnerability_status

    @property
    def with_notary(self):
        """
        Gets the with_notary of this GeneralInfo.
        If the Harbor instance is deployed with nested notary.

        :return: The with_notary of this GeneralInfo.
        :rtype: bool
        """
        return self._with_notary

    @with_notary.setter
    def with_notary(self, with_notary):
        """
        Sets the with_notary of this GeneralInfo.
        If the Harbor instance is deployed with nested notary.

        :param with_notary: The with_notary of this GeneralInfo.
        :type: bool
        """

        self._with_notary = with_notary

    @property
    def with_clair(self):
        """
        Gets the with_clair of this GeneralInfo.
        If the Harbor instance is deployed with nested clair.

        :return: The with_clair of this GeneralInfo.
        :rtype: bool
        """
        return self._with_clair

    @with_clair.setter
    def with_clair(self, with_clair):
        """
        Sets the with_clair of this GeneralInfo.
        If the Harbor instance is deployed with nested clair.

        :param with_clair: The with_clair of this GeneralInfo.
        :type: bool
        """

        self._with_clair = with_clair

    @property
    def with_admiral(self):
        """
        Gets the with_admiral of this GeneralInfo.
        If the Harbor instance is deployed with Admiral.

        :return: The with_admiral of this GeneralInfo.
        :rtype: bool
        """
        return self._with_admiral

    @with_admiral.setter
    def with_admiral(self, with_admiral):
        """
        Sets the with_admiral of this GeneralInfo.
        If the Harbor instance is deployed with Admiral.

        :param with_admiral: The with_admiral of this GeneralInfo.
        :type: bool
        """

        self._with_admiral = with_admiral

    @property
    def admiral_endpoint(self):
        """
        Gets the admiral_endpoint of this GeneralInfo.
        The url of the endpoint of admiral instance.

        :return: The admiral_endpoint of this GeneralInfo.
        :rtype: str
        """
        return self._admiral_endpoint

    @admiral_endpoint.setter
    def admiral_endpoint(self, admiral_endpoint):
        """
        Sets the admiral_endpoint of this GeneralInfo.
        The url of the endpoint of admiral instance.

        :param admiral_endpoint: The admiral_endpoint of this GeneralInfo.
        :type: str
        """

        self._admiral_endpoint = admiral_endpoint

    @property
    def auth_mode(self):
        """
        Gets the auth_mode of this GeneralInfo.
        The auth mode of current Harbor instance.

        :return: The auth_mode of this GeneralInfo.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """
        Sets the auth_mode of this GeneralInfo.
        The auth mode of current Harbor instance.

        :param auth_mode: The auth_mode of this GeneralInfo.
        :type: str
        """

        self._auth_mode = auth_mode

    @property
    def project_creation_restriction(self):
        """
        Gets the project_creation_restriction of this GeneralInfo.
        Indicate who can create projects, it could be 'adminonly' or 'everyone'.

        :return: The project_creation_restriction of this GeneralInfo.
        :rtype: str
        """
        return self._project_creation_restriction

    @project_creation_restriction.setter
    def project_creation_restriction(self, project_creation_restriction):
        """
        Sets the project_creation_restriction of this GeneralInfo.
        Indicate who can create projects, it could be 'adminonly' or 'everyone'.

        :param project_creation_restriction: The project_creation_restriction of this GeneralInfo.
        :type: str
        """

        self._project_creation_restriction = project_creation_restriction

    @property
    def self_registration(self):
        """
        Gets the self_registration of this GeneralInfo.
        Indicate whether the Harbor instance enable user to register himself.

        :return: The self_registration of this GeneralInfo.
        :rtype: bool
        """
        return self._self_registration

    @self_registration.setter
    def self_registration(self, self_registration):
        """
        Sets the self_registration of this GeneralInfo.
        Indicate whether the Harbor instance enable user to register himself.

        :param self_registration: The self_registration of this GeneralInfo.
        :type: bool
        """

        self._self_registration = self_registration

    @property
    def has_ca_root(self):
        """
        Gets the has_ca_root of this GeneralInfo.
        Indicate whether there is a ca root cert file ready for download in the file system.

        :return: The has_ca_root of this GeneralInfo.
        :rtype: bool
        """
        return self._has_ca_root

    @has_ca_root.setter
    def has_ca_root(self, has_ca_root):
        """
        Sets the has_ca_root of this GeneralInfo.
        Indicate whether there is a ca root cert file ready for download in the file system.

        :param has_ca_root: The has_ca_root of this GeneralInfo.
        :type: bool
        """

        self._has_ca_root = has_ca_root

    @property
    def harbor_version(self):
        """
        Gets the harbor_version of this GeneralInfo.
        The build version of Harbor.

        :return: The harbor_version of this GeneralInfo.
        :rtype: str
        """
        return self._harbor_version

    @harbor_version.setter
    def harbor_version(self, harbor_version):
        """
        Sets the harbor_version of this GeneralInfo.
        The build version of Harbor.

        :param harbor_version: The harbor_version of this GeneralInfo.
        :type: str
        """

        self._harbor_version = harbor_version

    @property
    def next_scan_all(self):
        """
        Gets the next_scan_all of this GeneralInfo.
        The UTC time in milliseconds, after which user can call scanAll API to scan all images.

        :return: The next_scan_all of this GeneralInfo.
        :rtype: int
        """
        return self._next_scan_all

    @next_scan_all.setter
    def next_scan_all(self, next_scan_all):
        """
        Sets the next_scan_all of this GeneralInfo.
        The UTC time in milliseconds, after which user can call scanAll API to scan all images.

        :param next_scan_all: The next_scan_all of this GeneralInfo.
        :type: int
        """

        self._next_scan_all = next_scan_all

    @property
    def clair_vulnerability_status(self):
        """
        Gets the clair_vulnerability_status of this GeneralInfo.

        :return: The clair_vulnerability_status of this GeneralInfo.
        :rtype: GeneralInfoClairVulnerabilityStatus
        """
        return self._clair_vulnerability_status

    @clair_vulnerability_status.setter
    def clair_vulnerability_status(self, clair_vulnerability_status):
        """
        Sets the clair_vulnerability_status of this GeneralInfo.

        :param clair_vulnerability_status: The clair_vulnerability_status of this GeneralInfo.
        :type: GeneralInfoClairVulnerabilityStatus
        """

        self._clair_vulnerability_status = clair_vulnerability_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GeneralInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
