# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Search(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'projects': 'list[Project]',
        'repositories': 'list[SearchRepository]'
    }

    attribute_map = {
        'projects': 'projects',
        'repositories': 'repositories'
    }

    def __init__(self, projects=None, repositories=None):
        """
        Search - a model defined in Swagger
        """

        self._projects = None
        self._repositories = None

        if projects is not None:
          self.projects = projects
        if repositories is not None:
          self.repositories = repositories

    @property
    def projects(self):
        """
        Gets the projects of this Search.
        Search results of the projects that matched the filter keywords.

        :return: The projects of this Search.
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """
        Sets the projects of this Search.
        Search results of the projects that matched the filter keywords.

        :param projects: The projects of this Search.
        :type: list[Project]
        """

        self._projects = projects

    @property
    def repositories(self):
        """
        Gets the repositories of this Search.
        Search results of the repositories that matched the filter keywords.

        :return: The repositories of this Search.
        :rtype: list[SearchRepository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """
        Sets the repositories of this Search.
        Search results of the repositories that matched the filter keywords.

        :param repositories: The repositories of this Search.
        :type: list[SearchRepository]
        """

        self._repositories = repositories

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Search):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
