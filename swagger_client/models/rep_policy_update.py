# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RepPolicyUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_id': 'int',
        'name': 'str',
        'enabled': 'int',
        'description': 'str',
        'cron_str': 'str'
    }

    attribute_map = {
        'target_id': 'target_id',
        'name': 'name',
        'enabled': 'enabled',
        'description': 'description',
        'cron_str': 'cron_str'
    }

    def __init__(self, target_id=None, name=None, enabled=None, description=None, cron_str=None):
        """
        RepPolicyUpdate - a model defined in Swagger
        """

        self._target_id = None
        self._name = None
        self._enabled = None
        self._description = None
        self._cron_str = None

        if target_id is not None:
          self.target_id = target_id
        if name is not None:
          self.name = name
        if enabled is not None:
          self.enabled = enabled
        if description is not None:
          self.description = description
        if cron_str is not None:
          self.cron_str = cron_str

    @property
    def target_id(self):
        """
        Gets the target_id of this RepPolicyUpdate.
        The target ID.

        :return: The target_id of this RepPolicyUpdate.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """
        Sets the target_id of this RepPolicyUpdate.
        The target ID.

        :param target_id: The target_id of this RepPolicyUpdate.
        :type: int
        """

        self._target_id = target_id

    @property
    def name(self):
        """
        Gets the name of this RepPolicyUpdate.
        The policy name.

        :return: The name of this RepPolicyUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RepPolicyUpdate.
        The policy name.

        :param name: The name of this RepPolicyUpdate.
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """
        Gets the enabled of this RepPolicyUpdate.
        The policy's enabled status.

        :return: The enabled of this RepPolicyUpdate.
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this RepPolicyUpdate.
        The policy's enabled status.

        :param enabled: The enabled of this RepPolicyUpdate.
        :type: int
        """

        self._enabled = enabled

    @property
    def description(self):
        """
        Gets the description of this RepPolicyUpdate.
        The description of the policy.

        :return: The description of this RepPolicyUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RepPolicyUpdate.
        The description of the policy.

        :param description: The description of this RepPolicyUpdate.
        :type: str
        """

        self._description = description

    @property
    def cron_str(self):
        """
        Gets the cron_str of this RepPolicyUpdate.
        The cron string for schedule job.

        :return: The cron_str of this RepPolicyUpdate.
        :rtype: str
        """
        return self._cron_str

    @cron_str.setter
    def cron_str(self, cron_str):
        """
        Sets the cron_str of this RepPolicyUpdate.
        The cron string for schedule job.

        :param cron_str: The cron_str of this RepPolicyUpdate.
        :type: str
        """

        self._cron_str = cron_str

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RepPolicyUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
